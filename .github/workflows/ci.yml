name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Create virtual environment
      run: |
        # Remove any existing broken virtual environment
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run tests
      run: |
        ./test.sh mcp

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          htmlcov/
        retention-days: 7

  test-with-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-deps-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-deps-

    - name: Create virtual environment
      run: |
        # Remove any existing broken virtual environment
        rm -rf .venv
        uv venv

    - name: Install dependencies with optional packages
      run: |
        uv sync

    - name: Run tests with all dependencies
      run: |
        ./test.sh mcp

    - name: Upload test results with deps
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-with-deps-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          htmlcov/
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-lint-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-lint-

    - name: Create virtual environment
      run: |
        # Remove any existing broken virtual environment
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run linting
      run: |
        uv run ruff check src/ tests/ examples/
        uv run ruff format --check src/ tests/ examples/

  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-security-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-security-

    - name: Create virtual environment
      run: |
        # Remove any existing broken virtual environment
        rm -rf .venv
        uv venv

    - name: Install dependencies
      run: |
        uv sync

    - name: Run security checks
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  cli-lint:
    name: Lint CLI Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true

    - name: Install linting tools
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2

    - name: Run CLI linting
      working-directory: ./cli
      run: |
        echo "Running CLI linting checks..."
        ./lint.sh
        echo "All CLI linting checks passed!" 